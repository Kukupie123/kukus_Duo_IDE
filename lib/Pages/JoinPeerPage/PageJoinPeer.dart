// ignore_for_file: prefer_const_constructors, sized_box_for_whitespace

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import 'package:provider/provider.dart';

import '../../Backend/provider/ProviderBackend.dart';

class PageJoinPeer extends StatefulWidget {
  const PageJoinPeer({Key? key}) : super(key: key);

  @override
  State<PageJoinPeer> createState() => _PageJoinPeerState();
}

class _PageJoinPeerState extends State<PageJoinPeer> {
  var offerGeneratedTC = TextEditingController();
  var remoteSDPTC = TextEditingController();
  var candidateTC = TextEditingController();
  StreamController<String> statusSC = StreamController();
  List<String> generatedIceCandidate = [];

  @override
  void initState() {
    super.initState();
    ProviderBackend providerBackend =
        Provider.of<ProviderBackend>(context, listen: false);
    providerBackend.webRTCServices.peerConnection?.onIceCandidate =
        (RTCIceCandidate candidate) {
      if (candidate.candidate != null) {
        var encodedICE = (json.encode({
          'candidate': candidate.candidate,
          'sdpMid': candidate.sdpMid,
          'sdpMlineIndex': candidate.sdpMLineIndex
        }));
        setState(() {
          generatedIceCandidate.add(encodedICE);
        });
      }
    };
    providerBackend.webRTCServices.peerConnection?.onIceConnectionState =
        (state) {
      if (state == RTCIceConnectionState.RTCIceConnectionStateConnected ||
          state == RTCIceConnectionState.RTCIceConnectionStateConnected) {
        statusSC.add("Successfully Connected");
      }
    };
  }

  @override
  Widget build(BuildContext context) {
    ProviderBackend providerBackend =
        Provider.of<ProviderBackend>(context, listen: false);

    return Scaffold(
      body: SizedBox(
        width: double.infinity,
        height: double.infinity,
        child: StreamBuilder<String>(
            stream: statusSC.stream,
            builder: (context, snapshot) {
              String? data = snapshot.data;
              return Column(
                children: [
                  Text(data == null ? "Idle" : snapshot.data!),
                  TextField(
                    controller: remoteSDPTC,
                    decoration: InputDecoration(
                        hintText: "Paste Offer Generated by Host..."),
                  ),
                  TextButton(
                      onPressed: () async {
                        if (remoteSDPTC.text.isEmpty) {
                          statusSC.add("Textfield is empty");
                          return;
                        }
                        statusSC.add("Setting Remote SDP");
                        var generatedAnsSDP = await providerBackend
                            .webRTCServices
                            .setRemoteSDP(remoteSDPTC.text);
                        offerGeneratedTC.text = generatedAnsSDP!;
                        statusSC.add(
                            "Setting Remote SDP Complete. Copy the generated Answer below and set it as the Remote Description of the Host.\n ICE Candidates should also start appearing. If not try Setting Remote Description again.");
                      },
                      child: Text("Set Remote Description")),
                  TextField(
                    controller: offerGeneratedTC,
                    decoration: InputDecoration(
                        hintText:
                            "Generated Answer shows here after Setting Remote Description"),
                  ),
                  Text(
                      "GENERATED ICE CANDIDATE :================================"),
                  Container(
                    height: 300,
                    child: ListView(
                      children: List.generate(
                        generatedIceCandidate.length,
                        (index) => Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Card(
                            child: Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: GestureDetector(
                                onTap: () async {
                                  statusSC
                                      .add("Copying Candidate ${index + 1}");
                                  await Clipboard.setData(ClipboardData(
                                      text: generatedIceCandidate[index]));
                                  statusSC.add("Copied Candidate ${index + 1}");
                                },
                                child: Text(generatedIceCandidate[index]),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  )
                ],
              );
            }),
      ),
    );
  }

  Future<void> generateOfferAndPutInTextField(
      ProviderBackend providerBackend) async {
    statusSC.add("Loading Offer");
    String? offerSDP = await providerBackend.webRTCServices.createOffer();
    setState(() {
      offerGeneratedTC.text = offerSDP!;
    });
    statusSC.add("Generated Offer");
  }
}
